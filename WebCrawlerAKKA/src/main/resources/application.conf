rest-client-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "fork-join-executor"
  # Configuration for the fork join pool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 30.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 80
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 10
}
akka {
    #set log level to debug
    loglevel = "ERROR"

    #loggers
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    #other log options
    log-dead-letters-during-shutdown = true


    actor {
        debug {
          # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
          #autoreceive = on
          #lifecycle = on
          #fsm = on
          #event-stream = on

        }
        deployment {
            /masterActor/domainMasterActor/downloadUrlRouter {
                router = round-robin
                nr-of-instances = 400  #must be calculated based on the number of domains that are being crawled
            }
            /masterActor/persistenceMasterActor/persistenceRouter {
                router = round-robin
                nr-of-instances = 10
            }
            /masterActor/processingMasterActor/indentifyLinksRouter {
                router = round-robin
                nr-of-instances = 50
            }
            /masterActor/processingMasterActor/dataExtractorRouter {
                router = round-robin
                nr-of-instances = 50
            }
            /masterActor/processingMasterActor/analyzeLinksRouter {
                router = round-robin
                nr-of-instances = 50
            }
        }

        # Prepare actors for remote access
        #provider = "akka.remote.RemoteActorRefProvider"
        #remote {
        #    enabled-transports = ["akka.remote.netty.tcp"]
        #    netty.tcp {
        #        hostname = "192.168.172.9"
        #        port = 2552
        #    }
        #}
    }
}

atmos {
    trace {
        enabled = true                # enable tracing
        node = WebCrawlerAKKA           # give this node a name

        traceable {      # trace settings
            "*" = on
        }

        sampling {
            "*" = 1
        }
    }
}